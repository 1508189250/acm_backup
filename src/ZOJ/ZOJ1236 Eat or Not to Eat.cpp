#ifdef _MSC_VER
#define DEBUG
#define _CRT_SECURE_NO_DEPRECATE
#endif

#include <fstream>
#include <stdio.h>
#include <iostream>
#include <string.h>
#include <string>
#include <limits.h>
#include <algorithm>
#include <math.h>
#include <numeric>
#include <functional>
#include <ctype.h>
#include <queue>
#include <vector>
#define MAX 1010
using namespace std;


int lcm_array[1024]={1,1,2,2,3,3,6,6,4,4,4,4,12,12,12,12,5,5,10,10,15,15,30,30,
20,20,20,20,60,60,60,60,6,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,
30,30,30,30,30,30,30,30,60,60,60,60,60,60,60,60,7,7,14,14,21,21,42,42,
28,28,28,28,84,84,84,84,35,35,70,70,105,105,210,210,140,140,140,140,420,420,420,420,
42,42,42,42,42,42,42,42,84,84,84,84,84,84,84,84,210,210,210,210,210,210,210,210,
420,420,420,420,420,420,420,420,8,8,8,8,24,24,24,24,8,8,8,8,24,24,24,24,
40,40,40,40,120,120,120,120,40,40,40,40,120,120,120,120,24,24,24,24,24,24,24,24,
24,24,24,24,24,24,24,24,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,
56,56,56,56,168,168,168,168,56,56,56,56,168,168,168,168,280,280,280,280,840,840,840,840,
280,280,280,280,840,840,840,840,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,
840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,9,9,18,18,9,9,18,18,
36,36,36,36,36,36,36,36,45,45,90,90,45,45,90,90,180,180,180,180,180,180,180,180,
18,18,18,18,18,18,18,18,36,36,36,36,36,36,36,36,90,90,90,90,90,90,90,90,
180,180,180,180,180,180,180,180,63,63,126,126,63,63,126,126,252,252,252,252,252,252,252,252,
315,315,630,630,315,315,630,630,1260,1260,1260,1260,1260,1260,1260,1260,126,126,126,126,126,126,126,126,
252,252,252,252,252,252,252,252,630,630,630,630,630,630,630,630,1260,1260,1260,1260,1260,1260,1260,1260,
72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,360,360,360,360,360,360,360,360,
360,360,360,360,360,360,360,360,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,
360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,504,504,504,504,504,504,504,504,
504,504,504,504,504,504,504,504,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,
504,504,504,504,504,504,504,504,504,504,504,504,504,504,504,504,2520,2520,2520,2520,2520,2520,2520,2520,
2520,2520,2520,2520,2520,2520,2520,2520,10,10,10,10,30,30,30,30,20,20,20,20,60,60,60,60,
10,10,10,10,30,30,30,30,20,20,20,20,60,60,60,60,30,30,30,30,30,30,30,30,
60,60,60,60,60,60,60,60,30,30,30,30,30,30,30,30,60,60,60,60,60,60,60,60,
70,70,70,70,210,210,210,210,140,140,140,140,420,420,420,420,70,70,70,70,210,210,210,210,
140,140,140,140,420,420,420,420,210,210,210,210,210,210,210,210,420,420,420,420,420,420,420,420,
210,210,210,210,210,210,210,210,420,420,420,420,420,420,420,420,40,40,40,40,120,120,120,120,
40,40,40,40,120,120,120,120,40,40,40,40,120,120,120,120,40,40,40,40,120,120,120,120,
120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,
120,120,120,120,120,120,120,120,280,280,280,280,840,840,840,840,280,280,280,280,840,840,840,840,
280,280,280,280,840,840,840,840,280,280,280,280,840,840,840,840,840,840,840,840,840,840,840,840,
840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,
90,90,90,90,90,90,90,90,180,180,180,180,180,180,180,180,90,90,90,90,90,90,90,90,
180,180,180,180,180,180,180,180,90,90,90,90,90,90,90,90,180,180,180,180,180,180,180,180,
90,90,90,90,90,90,90,90,180,180,180,180,180,180,180,180,630,630,630,630,630,630,630,630,
1260,1260,1260,1260,1260,1260,1260,1260,630,630,630,630,630,630,630,630,1260,1260,1260,1260,1260,1260,1260,1260,
630,630,630,630,630,630,630,630,1260,1260,1260,1260,1260,1260,1260,1260,630,630,630,630,630,630,630,630,
1260,1260,1260,1260,1260,1260,1260,1260,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,
360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,
360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,
2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,
2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,
2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520};

int killed[MAX],t[MAX],milk[MAX][5100];
bool need_proc[5100];

int main(void)
{
#ifdef DEBUG  
  freopen("../stdin.txt","r",stdin);
  freopen("../stdout.txt","w",stdout); 
#endif  

  int n,ncase=1;
  scanf("%d",&ncase);
  int cycle_cnt[11];

  while(ncase--)
  {
    scanf("%d",&n);
    memset(cycle_cnt,0,sizeof(cycle_cnt));
    memset(killed,0,sizeof(killed));
    memset(need_proc,true,sizeof(need_proc));

    for(int i=0;i<n;++i)
    {
      scanf("%d",&t[i]);
      ++cycle_cnt[t[i]];
      for(int j=0;j<t[i];++j)
        scanf("%d",&milk[i][j]);
    }

    int now=0,cycle_index=0;
    for(int i=2;i<11;++i)
    {
      if(cycle_cnt[i])
        cycle_index = cycle_index|(1<<(i-1));
    }

      int lcm_cycle=lcm_array[cycle_index];
      int last_kill_time=0,remain=n;
      while(remain)
      {
        if(!need_proc[now])
        {
          if(now-last_kill_time==lcm_cycle)
            break;
          ++now;
          continue;
        }

        int min_milk=INT_MAX,min_milk_cow=0,index;

        for(int i=0;i<n;++i)
        {
          if(!killed[i])
          {
            int tmp=milk[i][now%t[i]];
            if(tmp<min_milk)
            {
              min_milk=tmp;
              min_milk_cow=1;
              index=i;
            }
            else if(tmp == min_milk)
              ++min_milk_cow;
          }
        }
        if(min_milk_cow>1)
        {
          if(now-last_kill_time==lcm_cycle)
            break;
          need_proc[now+lcm_cycle]=false;
          ++now;
        }
        else
        {
          last_kill_time=now;
          --cycle_cnt[t[index]];
          if(!cycle_cnt[t[index]])
          {
            cycle_index ^=(1<<(t[index]-1));
            //             need_proc[now+lcm_cycle]=true;
            lcm_cycle=lcm_array[cycle_index];
            //             need_proc[now+lcm_cycle]=true;
          }
          need_proc[now+t[index]]=true;
          killed[index]=1;
          --remain;
          ++now;
        }
      }
      printf("%d %d\n",remain,(remain==n)?0:last_kill_time+1);
  }

  return 0;
}